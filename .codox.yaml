name: Codox Diagnostics & Self-Healing

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  diagnostics:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      BACKEND_URL: "https://cleanpro-backend-5539254765.europe-west1.run.app"

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üß≠ Sync latest code
        run: |
          git fetch origin main
          git reset --hard origin/main
          echo "‚úÖ Synced with latest main branch."

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚öôÔ∏è Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: üîé Verify gcloud configuration
        run: |
          gcloud auth list
          gcloud config set project "$GCP_PROJECT"
          gcloud config set run/region europe-west1
          gcloud info

      - name: üß† Install Codox CLI
        run: |
          npm install -g codox prettier@3 || echo "‚ö†Ô∏è Codox CLI install warning"
          sudo apt-get update -y
          sudo apt-get install -y jq yamllint
          codox --version || echo "‚ÑπÔ∏è Codox CLI ready"

      - name: üîé Prepare diagnostic script
        run: |
          if [ -f ./review_report.sh ]; then
            chmod +x ./review_report.sh
            echo "‚úÖ review_report.sh ready"
          else
            echo "‚ùå review_report.sh missing!"
            exit 1
          fi

      - name: üóùÔ∏è Validate required secrets
        run: |
          secrets=(GOOGLE_MAPS_API_KEY GCP_PROJECT GCP_SA_KEY GITHUB_TOKEN FIREBASE_KEY OPENAI_API_KEY)
          missing=0
          for s in "${secrets[@]}"; do
            if [ -z "${!s}" ]; then
              echo "‚ùå Missing: $s"
              missing=$((missing+1))
            else
              echo "‚úÖ $s OK"
            fi
          done
          [ $missing -gt 0 ] && exit 1 || echo "‚úÖ All secrets verified"

      - name: üß© Validate YAML syntax
        run: |
          yamllint .github/workflows/codox.yaml || echo "‚ö†Ô∏è YAML validation warnings only"

      - name: üìã Run Codox diagnostic
        run: |
          npm install || true
          ./review_report.sh || true
          git add agent.md || true
          git commit -m "chore: Codox diagnostic report update" || echo "‚ÑπÔ∏è No report changes"
          git push origin main || echo "‚ö†Ô∏è Push skipped"

      - name: ü§ñ Codox Auto-Repair Trigger
        if: ${{ failure() || always() }}
        run: |
          echo "ü§ñ Smart Agent detected failure, invoking auto-repair..."

          # üîß Fix duplicate PORT in index.js
          sed -i '/const PORT=/d' backend/index.js || true
          grep -q 'app.listen' backend/index.js || \
            echo 'app.listen(process.env.PORT || 8080, "0.0.0.0", ()=>console.log(`‚úÖ Server running on ${process.env.PORT||8080}`));' >> backend/index.js

          # üîß Fix Dockerfile WORKDIR and CMD
          if [ -f backend/Dockerfile ]; then
            sed -i '/WORKDIR \/app\/backend/d' backend/Dockerfile || true
            sed -i '/CMD/d' backend/Dockerfile || true
            echo 'WORKDIR /app/backend' >> backend/Dockerfile
            echo 'CMD ["node","index.js"]' >> backend/Dockerfile
          fi

          # üîß Add missing routes
          mkdir -p backend/routes
          for r in gcalendar_api hqs_api; do
            f="backend/routes/${r}.mjs"
            if [ ! -f "$f" ]; then
              echo "‚öôÔ∏è Creating missing $r route"
              echo 'import express from "express"; const router=express.Router(); router.get("/",(req,res)=>res.json({ok:true,route:"'$r'"})); export default router;' > "$f"
            fi
          done

          git add backend/ || true
          git commit -m "auto-fix: heal PORT duplication, WORKDIR, routes" || true
          git push || true

          echo "üöÄ Redeploying container..."
          gcloud builds submit --tag gcr.io/${GCP_PROJECT}/cleanpro-backend backend/ || true
          gcloud run deploy cleanpro-backend \
            --image gcr.io/${GCP_PROJECT}/cleanpro-backend \
            --region europe-west1 \
            --platform managed \
            --allow-unauthenticated || true

          echo "‚úÖ Auto-Repair Trigger completed."

      - name: ü©∫ Verify backend health
        run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' "$BACKEND_URL")
          if [ "$STATUS" = "200" ]; then
            echo "‚úÖ Backend healthy"
          else
            echo "‚ùå Backend returned HTTP $STATUS"
            exit 1
          fi
