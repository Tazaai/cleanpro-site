name: Deploy Backend & Frontend to Google Cloud

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  secret-validation:
    runs-on: ubuntu-latest
    outputs:
      secrets_valid: ${{ steps.validate.outputs.secrets_valid }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Quick Secret Validation
      id: validate
      run: |
        echo "üîç Running basic secret validation..."
        echo "======================================================"
        
        # Simple validation - just check if critical secrets exist
        VALIDATION_PASSED=true
        
        # Check each secret individually with proper shell quoting
        echo "Checking GCP_PROJECT..."
        if [ -z "${{ secrets.GCP_PROJECT }}" ]; then
          echo "‚ùå GCP_PROJECT: MISSING"
          VALIDATION_PASSED=false
        else
          echo "‚úÖ GCP_PROJECT: PRESENT"
        fi
        
        echo "Checking GCP_SA_KEY..."
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "‚ùå GCP_SA_KEY: MISSING"
          VALIDATION_PASSED=false
        else
          echo "‚úÖ GCP_SA_KEY: PRESENT"
        fi
        
        echo "Checking FIREBASE_KEY_BASE64..."
        if [ -z "${{ secrets.FIREBASE_KEY_BASE64 }}" ]; then
          echo "‚ö†Ô∏è FIREBASE_KEY_BASE64: MISSING (will use GCP_SA_KEY if available)"
        else
          echo "‚úÖ FIREBASE_KEY_BASE64: PRESENT"
        fi
        
        echo "Checking GOOGLE_MAPS_API_KEY..."
        if [ -z "${{ secrets.GOOGLE_MAPS_API_KEY }}" ]; then
          echo "‚ùå GOOGLE_MAPS_API_KEY: MISSING"
          VALIDATION_PASSED=false
        else
          echo "‚úÖ GOOGLE_MAPS_API_KEY: PRESENT"
        fi
        
        echo "Checking JWT_SECRET..."
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "‚ùå JWT_SECRET: MISSING"
          VALIDATION_PASSED=false
        else
          echo "‚úÖ JWT_SECRET: PRESENT"
        fi
        
        echo "======================================================"
        
        if [ "$VALIDATION_PASSED" = true ]; then
          echo "‚úÖ Basic secrets validated - deployment can proceed"
          echo "üîß Run ./review_report.sh for detailed validation"
          echo "secrets_valid=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Required secrets missing - deployment blocked"
          echo "üîß Configure secrets via GitHub UI: Settings ‚Üí Secrets"
          echo "secrets_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Streamlined Secret Validation
      if: steps.validate.outputs.secrets_valid == 'true'
      run: |
        echo "üî¨ Running streamlined deployment validation..."
        
        # Basic JWT_SECRET strength check
        JWT_LENGTH=$(echo -n "${{ secrets.JWT_SECRET }}" | wc -c)
        if [ $JWT_LENGTH -ge 32 ]; then
          echo "‚úÖ JWT_SECRET: Adequate length ($JWT_LENGTH chars)"
        else
          echo "‚ö†Ô∏è JWT_SECRET: Short length ($JWT_LENGTH chars) - recommend 32+ chars"
        fi
        
        echo "üí° Note: Detailed GCP_SA_KEY validation available in review_report.sh"
        echo "üéØ Deployment validation completed successfully!"

  test:
    needs: secret-validation
    runs-on: ubuntu-latest
    if: needs.secret-validation.outputs.secrets_valid == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        set -e
        # Install root devDependencies (Playwright, etc.) so tests can run
        npm install --no-audit --no-fund
        # Install frontend and backend dependencies (use npm install to avoid lockfile mismatch in CI)
        (cd frontend && npm install --no-audit --no-fund)
        (cd backend && npm install --no-audit --no-fund)
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: npx playwright test

  deploy:
    needs: [secret-validation, test]
    runs-on: ubuntu-latest
    if: needs.secret-validation.outputs.secrets_valid == 'true' && github.ref == 'refs/heads/main'
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      FIREBASE_KEY_BASE64: ${{ secrets.FIREBASE_KEY_BASE64 }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      APPSHEET_API_KEY: ${{ secrets.APPSHEET_API_KEY }}
      APPSHEET_APP_ID: ${{ secrets.APPSHEET_APP_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pre-deployment Health Check
        run: |
          echo "ü©∫ Running pre-deployment health check..."
          
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          echo "üß™ MANDATORY: Local testing should be completed before deployment"
          echo "üìã Run './test_backend_local.sh' locally to validate changes"
          echo "üö´ NO BYPASS: Always test locally before Cloud Run deployment"
          echo ""
          
          chmod +x scripts/health_check.sh
          if ./scripts/health_check.sh; then
            echo "‚úÖ Health check passed - proceeding with deployment"
          else
            echo "‚ùå Health check failed - stopping deployment"
            echo "üõ°Ô∏è This prevents broken deployments from reaching production"
            exit 1
          fi

      - name: Deployment Info
        run: |
          echo "üöÄ Starting deployment for commit: $(git rev-parse HEAD)"
          echo "üìÖ Deployment time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîß Trigger: ${{ github.event_name }}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Build & Deploy Backend to Cloud Run
        run: |
          cd backend
          echo "üîß Building and deploying backend..."
          
          # Build the image first
          gcloud builds submit --tag "europe-west1-docker.pkg.dev/$GCP_PROJECT/cloud-run-source-deploy/cleanpro-backend" .
          
          # Decode Base64 Firebase key and prepare for deployment
          if [ -n "${{ secrets.FIREBASE_KEY_BASE64 }}" ]; then
            echo "Using FIREBASE_KEY_BASE64 secret (Base64 encoded)"
            # Decode Base64 to get the raw JSON for Cloud Run environment variable
            FIREBASE_KEY_RAW=$(echo '${{ secrets.FIREBASE_KEY_BASE64 }}' | base64 --decode)
          elif [ -n "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "Using GCP_SA_KEY as FIREBASE_KEY (fallback, raw JSON)"
            FIREBASE_KEY_RAW='${{ secrets.GCP_SA_KEY }}'
          else
            echo "‚ùå No Firebase credentials available"
            exit 1
          fi
          
          # Deploy with environment variables directly using GitHub secrets
          gcloud run deploy cleanpro-backend \
            --image "europe-west1-docker.pkg.dev/$GCP_PROJECT/cloud-run-source-deploy/cleanpro-backend" \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 8080 \
            --timeout 900 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --project $GCP_PROJECT \
            --set-env-vars "FIREBASE_KEY=${{ secrets.FIREBASE_KEY_BASE64 }}" \
            --set-env-vars "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars "GCP_PROJECT=${{ secrets.GCP_PROJECT }}" \
            --set-env-vars "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" \
            --set-env-vars "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --set-env-vars "APPSHEET_API_KEY=${{ secrets.APPSHEET_API_KEY }}" \
            --set-env-vars "APPSHEET_APP_ID=${{ secrets.APPSHEET_APP_ID }}" \
            --set-env-vars "NODE_ENV=production"

      - name: Build & Deploy Frontend to Cloud Run
        run: |
          cd frontend
          echo "üé® Deploying frontend..."
          BACKEND_URL=$(gcloud run services describe cleanpro-backend --region=europe-west1 --project=$GCP_PROJECT --format='value(status.url)')
          
          # Debug: Show environment variables
          echo "üîç Environment variables available:"
          echo "BACKEND_URL: $BACKEND_URL"
          echo "GOOGLE_MAPS_API_KEY available: $([[ -n '${{ secrets.GOOGLE_MAPS_API_KEY }}' ]] && echo 'YES' || echo 'NO')"
          
          # Build using cloudbuild.yaml with substitutions
          gcloud builds submit \
            --config cloudbuild.yaml \
            --substitutions "_IMAGE_NAME=europe-west1-docker.pkg.dev/$GCP_PROJECT/cloud-run-source-deploy/cleanpro-frontend,_VITE_API_BASE=$BACKEND_URL,_VITE_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" \
            .
          
          gcloud run deploy cleanpro-frontend \
            --image "europe-west1-docker.pkg.dev/$GCP_PROJECT/cloud-run-source-deploy/cleanpro-frontend" \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 8080 \
            --project $GCP_PROJECT

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "=================================="
          
          # Get service URLs
          BACKEND_URL=$(gcloud run services describe cleanpro-backend --region=europe-west1 --project=$GCP_PROJECT --format='value(status.url)')
          FRONTEND_URL=$(gcloud run services describe cleanpro-frontend --region=europe-west1 --project=$GCP_PROJECT --format='value(status.url)')
          
          echo "üîß Backend URL: $BACKEND_URL"
          echo "üé® Frontend URL: $FRONTEND_URL"
          echo "üìù Commit: $(git rev-parse HEAD)"
          echo "üìÖ Deployed at: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Create deployment record
          echo "$(date '+%Y-%m-%d %H:%M:%S') - Commit: $(git rev-parse HEAD) - Backend: $BACKEND_URL - Frontend: $FRONTEND_URL" >> deployment_history.log
          
          echo ""
          echo "üéØ Clean Departure is live and ready for customers!"
          echo "‚úÖ Campaign discounts and square feet pricing deployed"
          echo "‚úÖ AppSheet integration ready for configuration"
          
          echo ""
          echo "üìä MANDATORY POST-DEPLOYMENT REVIEW:"
          echo "======================================"
          echo "1. üîç GitHub Copilot MUST run ./review_report.sh"
          echo "2. üìñ GitHub Copilot MUST review PROJECT_GUIDE.md"
          echo "3. üß™ GitHub Copilot MUST validate coordination points API"
          echo "4. üìù Update documentation with any changes discovered"
          echo "üö´ NO EXCEPTIONS: Full validation required after every deployment"

      - name: Post-Deployment Setup & Verification
        run: |
          echo "üå± Running post-deployment setup..."
          chmod +x scripts/post_deployment_setup.sh
          ./scripts/post_deployment_setup.sh