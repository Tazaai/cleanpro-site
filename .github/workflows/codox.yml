name: Codox Diagnostics & Self-Healing

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  diagnostics:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BACKEND_URL: "https://cleanpro-backend-5539254765.europe-west1.run.app"

    steps:
      - uses: actions/checkout@v4

      - name: 🔄 Sync latest main branch
        run: |
          git fetch origin main
          git reset --hard origin/main
          echo "✅ Synced with latest code from main."

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ⚙️ Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: 🔎 Verify gcloud configuration
        run: |
          gcloud auth list
          gcloud config set project $GCP_PROJECT
          gcloud config set run/region europe-west1
          gcloud info

      - name: 🧩 Sync latest Codox GPT fixes
        run: |
          git fetch origin main
          git checkout main
          git pull origin main --rebase

      - name: 🧠 Install Codox for GPT self-healing
        run: npm install -g codox

      - name: 🔧 Ensure review_report.sh executable
        run: |
          [ -f ./review_report.sh ] && chmod +x ./review_report.sh && echo "✅ review_report.sh ready" || echo "⚠️ Missing review_report.sh"

      - name: 🧩 Validate required secrets
        run: |
          required=(GOOGLE_MAPS_API_KEY GCP_PROJECT GCP_SA_KEY)
          missing=0
          for s in "${required[@]}"; do
            if [ -z "${!s}" ]; then
              echo "❌ Missing: $s"
              missing=$((missing+1))
            else
              echo "✅ $s OK"
            fi
          done
          [ $missing -gt 0 ] && exit 1 || echo "✅ All secrets OK"

      # ✅ New automated Dockerfile pre-check before diagnostics
      - name: 🐳 Pre-Diagnostic Dockerfile Auto-Patch
        run: |
          echo "🧩 Checking backend/Dockerfile..."
          if [ -f backend/Dockerfile ]; then
            sed -i 's#WORKDIR /app$#WORKDIR /app/backend#' backend/Dockerfile || true
            grep -q 'EXPOSE 8080' backend/Dockerfile || echo 'EXPOSE 8080' >> backend/Dockerfile
            if grep -q 'firebase_config.json' backend/Dockerfile; then
              sed -i '/firebase_config.json/d' backend/Dockerfile
              echo "✅ Removed hard firebase_config copy"
            fi
            # Add optional firebase_config copy
            if ! grep -q "firebase_config optional" backend/Dockerfile; then
              cat >> backend/Dockerfile <<'EOF'
# firebase_config optional
RUN if [ -f firebase_config.json ]; then \
      cp firebase_config.json /app/firebase_config.json && \
      echo "✅ firebase_config.json copied"; \
    else \
      echo "ℹ️ firebase_config.json not found, skipping"; \
    fi
EOF
            fi
          else
            echo "⚠️ backend/Dockerfile not found!"
          fi

      - name: 📋 Run diagnostic script
        run: ./review_report.sh

      - name: ♻️ Commit Codox auto-fixes and redeploy
        if: always()
        run: |
          git config --global user.name "Codox Bot"
          git config --global user.email "codox@bot.local"
          git add backend/ frontend/ || true
          git commit -m "chore: apply Codox auto-fixes from diagnostics" || echo "ℹ️ No new changes"
          git push origin main || echo "⚠️ Push skipped"
          bash ./deploy_backend.sh || echo "⚠️ Redeploy failed, continuing."

      - name: 🔄 Verify backend after redeploy
        if: always()
        run: |
          echo "🩺 Health check..."
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Backend OK"
              exit 0
            fi
            echo "⚠️ Attempt $i: $STATUS"
            sleep 10
          done
          echo "❌ Backend not ready"
          exit 1
