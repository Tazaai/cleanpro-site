name: Codox Diagnostics & Self-Healing

on:
  workflow_dispatch: # ‚úÖ Manual trigger in Actions tab

permissions:
  contents: write

jobs:
  diagnostics:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      BACKEND_URL: "https://cleanpro-backend-5539254765.europe-west1.run.app"

    steps:
      # ‚úÖ Checkout & Sync
      - uses: actions/checkout@v4
      - name: üß≠ Sync latest code
        run: |
          git fetch origin main
          git reset --hard origin/main
          echo "‚úÖ Synced with latest main branch."

      # ‚úÖ Authenticate & Setup GCP
      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚öôÔ∏è Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: üîé Verify gcloud configuration
        run: |
          gcloud auth list
          gcloud config set project "$GCP_PROJECT"
          gcloud config set run/region europe-west1
          gcloud info

      # ‚úÖ Install Codox CLI & Tools
      - name: üß† Install Codox CLI
        run: |
          npm install -g codox prettier@3 || echo "‚ö†Ô∏è Codox CLI install warning"
          sudo apt-get update -y
          sudo apt-get install -y jq yamllint
          codox --version || echo "‚ÑπÔ∏è Codox CLI ready"

      # ‚úÖ Prepare Diagnostic Script
      - name: üîß Prepare diagnostic script
        run: |
          if [ -f ./review_report.sh ]; then
            chmod +x ./review_report.sh
            echo "‚úÖ review_report.sh ready"
          else
            echo "‚ùå review_report.sh missing!"
            exit 1
          fi

      # ‚úÖ Validate Secrets
      - name: üóùÔ∏è Validate required secrets
        run: |
          secrets=(GOOGLE_MAPS_API_KEY GCP_PROJECT GCP_SA_KEY GITHUB_TOKEN)
          missing=0
          for s in "${secrets[@]}"; do
            if [ -z "${!s}" ]; then
              echo "‚ùå Missing: $s"
              missing=$((missing+1))
            else
              echo "‚úÖ $s OK"
            fi
          done
          [ $missing -gt 0 ] && exit 1 || echo "‚úÖ All secrets verified"

      # ‚úÖ Self-heal backend Dockerfile
      - name: üê≥ Self-heal backend Dockerfile
        run: |
          echo "üîç Checking backend/Dockerfile..."
          if [ -f backend/Dockerfile ]; then
            sed -i 's#WORKDIR /app$#WORKDIR /app/backend#' backend/Dockerfile || true
            grep -q 'EXPOSE 8080' backend/Dockerfile || echo 'EXPOSE 8080' >> backend/Dockerfile
            grep -q 'CMD' backend/Dockerfile || echo 'CMD ["node","index.js"]' >> backend/Dockerfile
            echo "‚úÖ Dockerfile verified and fixed if needed."
          else
            echo "‚ö†Ô∏è backend/Dockerfile not found ‚Äî creating placeholder..."
            cat <<'EOF' > backend/Dockerfile
            FROM node:20-slim
            WORKDIR /app
            COPY . .
            RUN npm install --production
            EXPOSE 8080
            CMD ["node","index.js"]
            EOF
          fi
          EXPOSE 8080
          CMD ["node","index.js"]
          EOF
